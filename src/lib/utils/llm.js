const configSQL = `Your only task is to convert the user's question into a single SQL query (PostgreSQL). Use the database schema provided in the context. NEVER return text that is not pure SQL code, NEVER USE Markdown. Use only the tables 'bovinos', 'fichaLactacao', 'OcorrenciaEvento', and 'AssociacaoBovinos'. If it is not possible to generate a query, return the string 'null'. public."fichaLactacao" (dataencerramento date null, formacoleta text null, idademesesparto bigint null, "idAnimal" bigint null, ideventoparto bigint null, ideventoseca bigint null, numeroordenhas bigint null, qtdediaslactacao double precision null, qtdegordura305 double precision null, qtdeleite305 double precision null, qtdeproteinas305 double precision null, codigo character varying null, id bigint generated by default as identity not null, constraint fichaLactacao_pkey primary key (id), constraint fichaLactacao_id_key unique (id), constraint fichaLactacao_idAnimal_fkey foreign KEY ("idAnimal") references bovinos (id) on delete CASCADE) public.bovinos (codigo character varying null default ''::character varying, "dataNascimento" timestamp without time zone null, nome character varying null, "paisOrigem" character varying null, raÃ§a bigint null, id bigint generated by default as identity not null, constraint bovinos_pkey primary key (id)) public."OcorrenciaEvento" ("dataOcorrencia" timestamp without time zone not null, descricao character varying null, tipo_evento bigint null, constraint OcorrenciaEvento_pkey primary key ("dataOcorrencia")) public."AssociacaoBovinos" (ascendente_id bigint generated by default as identity not null, bovinos_id bigint not null, situacao bigint null, tipo bigint null, id bigint generated by default as identity not null, constraint AssociacaoBovinos_pkey primary key (id))`;
const configAnswer = `Your role is to transform the data resulting from an SQL query in JSON format into a coherent and user-friendly response. Use the original question and the data to generate the answer. If the data is empty, politely inform the user. If you run out in any problem, answer being honest and direct, don't talk about technical stuff, like SQL, or databases, don't offer help to fix problems or suggestions like that.`;

export async function generateSQLQuery(prompt) {
  const body = {
    prompt,
    system: configSQL,
  };

  const response = await fetch("https://lucas485.app.n8n.cloud/webhook/ai", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(body),
  });

  if (response.status == 200) {
    return await response.text();
  } else {
    console.error(response.text());
    throw "Error generating SQL: " + response.text();
  }
}

export async function generateFinalAnswer(prompt, data) {
  const body = {
    prompt: prompt + " SQL query result: " + JSON.stringify(data),
    system: configAnswer,
  };

  const response = await fetch("https://lucas485.app.n8n.cloud/webhook/ai", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(body),
  });

  if (response.status == 200) {
    return await response.text();
  } else {
    console.error(response.text());
    throw "Error generating final answer: " + response.text();
  }
}

/*
export async function generateSQLQueryWithMemory(history) {
  const body = {
    model: "openai",
    messages: [
      {
        role: "system",
        content: configSQL,
      },
      ...history.map(({ role, content }) => ({ role, content })),
    ], // {role, content}[]
    temperature: 0.2,
    reasiong_effort: "minimal",
    max_tokens: 5000,
    stream: false,
  };

  const response = await fetch("https://text.pollinations.ai/openai", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(body),
  });

  const data = response.status == 200 ? await response.json() : {};
  return data;
}

export async function generateSQLQuery(prompt) {
  const url = new URL(
    `https://text.pollinations.ai/${encodeURIComponent(prompt)}`
  );
  url.searchParams.set("model", "openai");
  url.searchParams.set("system", configSQL);
  url.searchParams.set("temperature", "1");

  // console.log(url.href);
  const response = await fetch(url);
  const result = await response.text();
  return result;
}


export async function generateFinalAnswer(prompt, data) {
  const url = new URL(
    `https://text.pollinations.ai/${encodeURIComponent(
      prompt + " SQL query result: " + JSON.stringify(data)
    )}`
  );
  url.searchParams.set("model", "openai");
  url.searchParams.set("system", configAnswer);
  url.searchParams.set("temperature", "1");

  // console.log(url.href);
  const response = await fetch(url);
  const result = await response.text();
  return result;
}
*/
