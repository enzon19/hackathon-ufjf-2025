const configSQL = `Your only task is to convert the user's question into a single SQL query (PostgreSQL). NEVER REPLY IN MARKDOWN AND ALWAYS PUT QUOTES IN COLUMNS AND TABLES NAMES. Use the database schema provided in the context. NEVER return text that is not pure SQL code. Use only the tables 'bovinos', 'fichaLactacao', 'OcorrenciaEvento', and 'AssociacaoBovinos' and use only its columns. If it is not possible to generate a query, return the string 'null'. When the user talks about "VacaXXXXXXX" or "TouroXXXXXXX" he's talking about the bovinos, nome column. table public."fichaLactacao" (dataencerramento date null, formacoleta text null, idademesesparto bigint null, "idAnimal" bigint null, ideventoparto bigint null, ideventoseca bigint null, numeroordenhas bigint null, qtdediaslactacao double precision null, qtdegordura305 double precision null, qtdeleite305 double precision null, qtdeproteinas305 double precision null, codigo character varying null, id bigint generated by default as identity not null); table public.bovinos (codigo character varying null default ''::character varying, "dataNascimento" timestamp without time zone null, nome character varying null, "paisOrigem" character varying null, raÃ§a bigint null, "idAnimal" bigint generated by default as identity not null, constraint bovinos_pkey primary key ("idAnimal")); create table public."OcorrenciaEvento" (id bigint generated by default as identity not null, "idAnimal" bigint not null, "dataOcorrencia" date null, facilidade_parto text null, nro_crias bigint null, qtde_litros bigint null, sexo_crias text null, tipo_evento bigint null, constraint OcorrenciaEvento_1_pkey primary key (id)); table public."AssociacaoBovinos" (ascendente_id bigint generated by default as identity not null, bovino_id bigint not null, situacao bigint null, tipo bigint null, id bigint generated by default as identity not null, constraint AssociacaoBovinos_pkey primary key (id)). tipo_evento (int): 7 means abertura_lactacao, 3 means cobertura, 2 means obito, 4 means ordenha, 1 means parto, 5 means pesagem, 6 means seca`;
const configAnswer = `Your role is to transform the data resulting from an SQL query in JSON format into a coherent and user-friendly response. Use the original question and the data to generate the answer. If the data is empty, politely inform the user. If you run out in any problem, answer being honest and direct. DON'T TALK ABOUT TECHNICAL STUFF, LIKE SQL OR DATABASES. Don't offer help to fix problems or suggestions like that. tipo_evento (int): 7 means abertura_lactacao, 3 means cobertura, 2 means obito, 4 means ordenha, 1 means parto, 5 means pesagem, 6 means seca`;

export async function generateSQLQuery(prompt) {
  const body = {
    prompt,
    system: configSQL,
  };

  const response = await fetch("https://lucas485.app.n8n.cloud/webhook/ai", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(body),
  });

  if (response.status == 200) {
    return await response.text();
  } else {
    console.error(response.text());
    throw "Error generating SQL: " + response.text();
  }
}

export async function generateFinalAnswer(prompt, data) {
  const body = {
    prompt: prompt + " SQL query result: " + JSON.stringify(data),
    system: configAnswer,
  };

  const response = await fetch("https://lucas485.app.n8n.cloud/webhook/ai", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(body),
  });

  if (response.status == 200) {
    return await response.text();
  } else {
    console.error(response.text());
    throw "Error generating final answer: " + response.text();
  }
}

/*
export async function generateSQLQueryWithMemory(history) {
  const body = {
    model: "openai",
    messages: [
      {
        role: "system",
        content: configSQL,
      },
      ...history.map(({ role, content }) => ({ role, content })),
    ], // {role, content}[]
    temperature: 0.2,
    reasiong_effort: "minimal",
    max_tokens: 5000,
    stream: false,
  };

  const response = await fetch("https://text.pollinations.ai/openai", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(body),
  });

  const data = response.status == 200 ? await response.json() : {};
  return data;
}

export async function generateSQLQuery(prompt) {
  const url = new URL(
    `https://text.pollinations.ai/${encodeURIComponent(prompt)}`
  );
  url.searchParams.set("model", "openai");
  url.searchParams.set("system", configSQL);
  url.searchParams.set("temperature", "1");

  // console.log(url.href);
  const response = await fetch(url);
  const result = await response.text();
  return result;
}


export async function generateFinalAnswer(prompt, data) {
  const url = new URL(
    `https://text.pollinations.ai/${encodeURIComponent(
      prompt + " SQL query result: " + JSON.stringify(data)
    )}`
  );
  url.searchParams.set("model", "openai");
  url.searchParams.set("system", configAnswer);
  url.searchParams.set("temperature", "1");

  // console.log(url.href);
  const response = await fetch(url);
  const result = await response.text();
  return result;
}
*/
